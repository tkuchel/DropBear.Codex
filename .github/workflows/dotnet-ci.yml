name: .NET CI and NuGet Management

permissions:
  contents: write

on:
  push:
    branches: [ main, master, develop ]  # Includes main, master, and develop branches
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-manage-nuget:
    runs-on: windows-latest

    strategy:
      matrix:
        project:
          - DropBear.Codex.Blazor
          - DropBear.Codex.Core
          - DropBear.Codex.Files
          - DropBear.Codex.Hashing
          - DropBear.Codex.Tasks
          - DropBear.Codex.Serialization
          - DropBear.Codex.StateManagement
          - DropBear.Codex.Utilities

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Update .NET workloads
        run: dotnet workload update

      - name: Restore dependencies
        run: dotnet restore ${{ matrix.project }}/${{ matrix.project }}.csproj

      - name: Build
        run: dotnet build ${{ matrix.project }}/${{ matrix.project }}.csproj --no-restore --configuration Release

      - name: Test
        run: dotnet test ${{ matrix.project }}/${{ matrix.project }}.csproj --no-build --verbosity normal --configuration Release

      - name: Pack
        run: dotnet pack ${{ matrix.project }}/${{ matrix.project }}.csproj --no-build --output ./nuget-packages --configuration Release

      - name: Extract Package Version
        id: extract_version
        run: |
          $packageName = Get-ChildItem -Path ./nuget-packages/ | Where-Object { $_.Name -like "*${{ matrix.project }}*.nupkg" } | Select-Object -ExpandProperty Name
          $packageVersion = $packageName -replace '^.*\.(\d+\.\d+\.\d+)\.nupkg$', '$1'
          echo "PACKAGE_VERSION=$packageVersion" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Archive NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-${{ env.PACKAGE_VERSION }}
          path: ./nuget-packages/*.nupkg

      - name: Check if GitHub Release Exists
        id: check_release
        run: |
          gh release view ${{ github.ref_name }} || echo "not_found" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create or Update GitHub Release
        if: steps.check_release.outputs.stdout == 'not_found'
        run: |
          gh release create ${{ github.ref_name }} --title "${{ github.ref_name }}" --notes "Release ${{ github.ref_name }}"
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts to Release
        run: |
          Get-ChildItem ./nuget-packages/*.nupkg -Name | ForEach-Object {
            gh release upload ${{ github.ref_name }} "./nuget-packages/${{ matrix.project }}-${{ env.PACKAGE_VERSION }}/$_" --clobber
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish NuGet Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          Get-ChildItem ./nuget-packages/*.nupkg -Name | ForEach-Object {
            dotnet nuget push "./nuget-packages/${{ matrix.project }}-${{ env.PACKAGE_VERSION }}/$_" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          }
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
