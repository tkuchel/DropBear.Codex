name: .NET CI and NuGet Management

permissions:
  contents: write

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, master, develop ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-manage-nuget:
    runs-on: windows-latest

    strategy:
      matrix:
        project:
          - DropBear.Codex.Blazor
          - DropBear.Codex.Core
          - DropBear.Codex.Files
          - DropBear.Codex.Hashing
          - DropBear.Codex.Tasks
          - DropBear.Codex.Serialization
          - DropBear.Codex.StateManagement
          - DropBear.Codex.Utilities

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Update .NET workloads
        run: dotnet workload update

      - name: Restore dependencies
        run: dotnet restore ${{ matrix.project }}/${{ matrix.project }}.csproj

      - name: Build
        run: dotnet build ${{ matrix.project }}/${{ matrix.project }}.csproj --no-restore --configuration Release

      - name: Test
        run: dotnet test ${{ matrix.project }}/${{ matrix.project }}.csproj --no-build --verbosity normal --configuration Release

      - name: Pack
        run: dotnet pack ${{ matrix.project }}/${{ matrix.project }}.csproj --no-build --output ./nuget-packages --configuration Release

      - name: Extract Package Version
        id: extract_version
        run: |
          $packageName = Get-ChildItem -Path ./nuget-packages/ | Where-Object { $_.Name -like "*${{ matrix.project }}*.nupkg" } | Select-Object -ExpandProperty Name
          $packageVersion = $packageName -replace '^.*\.(\d+\.\d+\.\d+)\.nupkg$', '$1'
          echo "PACKAGE_VERSION=$packageVersion" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set Release Name
        run: |
          if ('${{ github.ref_type }}' -eq 'tag') {
            echo "RELEASE_NAME=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "RELEASE_NAME=${{ github.ref_name }}-$(git rev-parse --short HEAD)" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Check if GitHub Release Exists
        id: check_release
        run: |
          $releaseName = "${{ env.RELEASE_NAME }}"
          $releaseExists = (gh release view "$releaseName" 2>&1)
          if ($LASTEXITCODE -eq 0) {
            echo "EXISTS=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "Release '$releaseName' exists."
          } else {
            echo "EXISTS=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "Release '$releaseName' does not exist."
          }
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: env.EXISTS == 'false' && (github.ref_type == 'tag' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          $releaseName = "${{ env.RELEASE_NAME }}"
          gh release create "$releaseName" --title "$releaseName" --notes "Release $releaseName"
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts to Release
        if: github.ref_type == 'tag' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          $releaseName = "${{ env.RELEASE_NAME }}"
          Get-ChildItem ./nuget-packages/*.nupkg | ForEach-Object {
            gh release upload "$releaseName" $_.FullName --clobber
          }
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish NuGet Package
        if: github.ref_type == 'tag'
        run: |
          Get-ChildItem ./nuget-packages/*.nupkg | ForEach-Object {
            dotnet nuget push $_.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          }
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
