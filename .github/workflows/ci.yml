name: CI (.NET 9)

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build-test:
    permissions:
      contents: read
      checks: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet: [ "9.0.x" ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Validate Version Alignment
        shell: pwsh
        run: |
          Write-Host "Validating version alignment (Nerdbank.GitVersioning)..."
          ./validate-version-alignment.ps1
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Version validation failed! See output above for details."
            exit 1
          }

      - name: Restore
        run: dotnet restore --nologo

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore --nologo

      - name: Test + Coverage (Cobertura)
        shell: bash
        run: |
          dotnet test --configuration Release --no-build --nologo \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Publish Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: "./TestResults/**/coverage.cobertura.xml"
          targetdir: "./TestResults/CoverageReport"
          reporttypes: "HtmlInline_AzurePipelines;Cobertura"

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: ./TestResults/CoverageReport

      - name: Collect Test Results
        if: always()
        shell: bash
        run: |
          mkdir -p TestResults/collected
          find . -type f -name "*.trx" -exec cp {} TestResults/collected \;

      - name: Annotate Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: ".NET Tests (${{ matrix.os }})"
          path: "TestResults/collected/*.trx"
          reporter: dotnet-trx
