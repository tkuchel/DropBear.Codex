#region

using DropBear.Codex.Blazor.Enums;
using DropBear.Codex.Blazor.Models;
using DropBear.Codex.Blazor.Services;

#endregion

namespace DropBear.Codex.Blazor.Interfaces;

/// <summary>
///     Interface for the Page Alert Service.
/// </summary>
public interface IPageAlertService
{
    IEnumerable<PageAlert> Alerts { get; }

    /// <summary>
    ///     Occurs when an alert should be added.
    /// </summary>
    event AsyncEventHandler<PageAlertEventArgs>? OnAddAlert;

    /// <summary>
    ///     Occurs when an alert should be removed.
    /// </summary>
    event AsyncEventHandler<PageAlertEventArgs>? OnRemoveAlert;

    /// <summary>
    ///     Occurs when all alerts should be cleared.
    /// </summary>
    event AsyncEventHandler<EventArgs>? OnClearAlerts;

    /// <summary>
    ///     Adds an alert with the specified details.
    /// </summary>
    Task<bool> AddAlertAsync(
        string title,
        string message,
        AlertType type,
        bool isDismissible,
        int? durationMs = 5000);

    /// <summary>
    ///     Removes an alert by its ID.
    /// </summary>
    Task<bool> RemoveAlertAsync(Guid id);

    /// <summary>
    ///     Clears all alerts.
    /// </summary>
    Task<bool> ClearAlertsAsync();
}

/// <summary>
///     Represents an asynchronous event handler.
/// </summary>
/// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
/// <param name="sender">The source of the event.</param>
/// <param name="e">An object that contains the event data.</param>
public delegate Task AsyncEventHandler<in TEventArgs>(object sender, TEventArgs e);
