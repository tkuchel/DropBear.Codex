@using DropBear.Codex.Blazor.Enums
@using Microsoft.AspNetCore.Components.Forms
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase

<div class="file-upload-container @ComponentId">
    <div class="file-upload-component">
        <!-- Drop Zone -->
        <div class="file-upload-dropzone @(_isDragOver ? "dragover" : "")"
             id="@($"{ComponentId}-dropzone")"
             role="button"
             aria-label="File upload drop zone"
             tabindex="0"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave"
             @ondragover:preventDefault="true"
             @ondrop:preventDefault="true"
             @ondrop="HandleDrop">
            <i class="fas fa-cloud-upload-alt fa-2x file-upload-icon"></i>
            <p class="file-upload-text">@(_isDragOver ? "Release to upload" : "Drag & Drop files here or")</p>

            <InputFile OnChange="HandleFileSelectionAsync"
                       multiple
                       id="@($"{ComponentId}-file-input")"
                       class="file-upload-input" />

            <button type="button"
                    @onclick="OpenFileDialog"
                    class="file-upload-button"
                    disabled="@(_isUploading || IsDisposed)">
                Choose Files
            </button>
        </div>


        <!-- Selected Files List -->
        @if (SelectedFiles.Any())
        {
            <div class="file-upload-list">
                @foreach (var file in SelectedFiles.Values)
                {
                    <div class="file-upload-item" key="@file.Name">
                        <div class="file-upload-info">
                            <div class="file-upload-name" title="@file.Name">@file.Name</div>
                            <div class="file-upload-meta">
                                @FormatFileSize(file.Size) | @(file.ContentType ?? "Unknown type")
                            </div>
                            <div class="file-upload-status">
                                @if (file.UploadStatus == UploadStatus.Uploading)
                                {
                                    <div class="file-upload-progress-small">
                                        <div class="file-upload-progress-bar"
                                             style="width: @(file.UploadProgress)%">
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <span class="@GetStatusClass(file.UploadStatus)">
                                        @file.UploadStatus.ToString()
                                    </span>
                                }
                            </div>
                        </div>
                        <button type="button"
                                class="file-upload-remove-btn"
                                @onclick="() => RemoveFile(file)"
                                disabled="@(_isUploading || IsDisposed)">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                }
            </div>
        }

        <!-- Upload Controls -->
        <div class="file-upload-controls">
            <button type="button"
                    class="file-upload-submit"
                    @onclick="UploadFilesAsync"
                    disabled="@(!CanUpload)">
                @if (_isUploading)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Uploading...</span>
                }
                else
                {
                    <span>Upload Files</span>
                }
            </button>

            @if (_isUploading)
            {
                <div class="file-upload-progress">
                    <div class="file-upload-progress-bar"
                         style="width: @(_uploadProgress)%">
                    </div>
                    <span class="file-upload-progress-text">@_uploadProgress%</span>
                </div>
            }
        </div>

        <!-- Upload Results -->
        @if (UploadedFiles.Any())
        {
            <div class="file-upload-results">
                <h4>Uploaded Files</h4>
                <div class="file-upload-completed">
                    @foreach (var file in UploadedFiles)
                    {
                        <div class="file-upload-completed-item">
                            <i class="@GetStatusIconClass(file.UploadStatus)"></i>
                            <span class="file-upload-completed-name">@file.Name</span>
                            <span class="file-upload-completed-size">(@FormatFileSize(file.Size))</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>
