@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase
@inject IJSRuntime JsRuntime

<div class="file-upload-container">
    <div class="file-upload-component">
        <div class="file-upload-dropzone @(IsDragOver ? "dragover" : "")"
             @ondragenter:preventDefault
             @ondragenter="() => IsDragOver = true"
             @ondragleave:preventDefault
             @ondragleave="() => IsDragOver = false"
             @ondragover:preventDefault
             @ondrop:preventDefault
             @ondrop="HandleDropAsync">
            <i class="fas fa-cloud-upload-alt fa-2x file-upload-icon"></i>
            <p>Drag & Drop files here or</p>
            <div class="file-input-wrapper">
                <InputFile OnChange="HandleFileSelectionAsync" multiple id="fileInput" class="file-upload-input"/>
            </div>
            <label for="fileInput" class="file-upload-label">
                Choose Files
            </label>
        </div>
        <div class="file-upload-list">
            @foreach (var file in SelectedFiles)
            {
                <div class="file-upload-item">
                    <div class="file-upload-info">
                        <div class="file-upload-name">@file.Name</div>
                        <div class="file-upload-meta">
                            @FormatFileSize(file.Size) | @(file.ContentType ?? "Unknown type")
                        </div>
                        <div class="file-upload-status">@file.UploadStatus</div>
                    </div>
                    <button class="file-upload-remove-btn" @onclick="() => RemoveFile(file)">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            }
        </div>
        <div class="file-upload-footer">
            <button class="file-upload-btn"
                    @onclick="UploadFilesAsync"
                    disabled="@(SelectedFiles.Count == 0 || IsUploading)">
                @if (IsUploading)
                {
                    <i class="fas fa-spinner file-upload-spinner"></i>
                    <span>Uploading...</span>
                }
                else
                {
                    <span>Upload Files</span>
                }
            </button>
            <div class="file-upload-progress">
                <div class="file-upload-progress-bar" style="width: @(UploadProgress)%"></div>
            </div>
        </div>
    </div>

    @if (UploadedFiles.Any())
    {
        <div class="file-upload-completed-list">
            <h4>Uploaded Files:</h4>
            <ul>
                @foreach (var file in UploadedFiles)
                {
                    <li>
                        <span class="file-status-icon @GetFileStatusIconClass(file.UploadStatus)"></span>
                        @file.Name (@FormatFileSize(file.Size))
                    </li>
                }
            </ul>
        </div>
    }
</div>
