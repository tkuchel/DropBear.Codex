@namespace DropBear.Codex.Blazor.Components.Notifications
@using DropBear.Codex.Blazor.Enums
@using DropBear.Codex.Blazor.Helpers
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase

@* SECURITY NOTE: SnackbarInstance.Message is sanitized using HtmlSanitizationHelper to prevent XSS attacks.
   If you need to display trusted HTML from CMS/admin, use HtmlSanitizationHelper.FromTrustedSource() instead. *@

<div id="@SnackbarInstance.Id"
     class="@CssClasses"
     style="--duration: @(SnackbarInstance.Duration)ms; --delay: @(SnackbarInstance.ShowDelay)ms"
     role="alert"
     aria-live="@GetAriaLive()"
     aria-atomic="true"
     @attributes="AdditionalAttributes">

    <!-- Status Icon -->
    <div class="snackbar-icon" aria-hidden="true">
        @SnackbarIcons.GetIcon(SnackbarInstance.Type)
    </div>

    <!-- Content Area -->
    <div class="snackbar-content">
        @if (!string.IsNullOrWhiteSpace(SnackbarInstance.Title))
        {
            <div class="snackbar-title">@SnackbarInstance.Title</div>
        }

        <div class="snackbar-message">
            @* SECURITY: Sanitize snackbar message to prevent XSS attacks *@
            @HtmlSanitizationHelper.Sanitize(SnackbarInstance.Message)
        </div>

        @if (SnackbarInstance.Actions?.Any() == true)
        {
            <div class="snackbar-actions">
                @foreach (var action in SnackbarInstance.Actions)
                {
                    <button type="button"
                            class="snackbar-action @(action.IsPrimary ? "primary" : "secondary")"
                            disabled="@(IsDisposed || action.IsDisabled)"
                            title="@action.Tooltip"
                            @onclick="@(() => HandleActionClickAsync(action))"
                            @onclick:preventDefault="true"
                            @onclick:stopPropagation="true">
                        @if (!string.IsNullOrWhiteSpace(action.Icon))
                        {
                            <i class="@action.Icon" aria-hidden="true"></i>
                        }
                        @action.Label
                    </button>
                }
            </div>
        }
    </div>

    <!-- Close Button -->
    @if (!SnackbarInstance.RequiresManualClose || SnackbarInstance.Actions?.Any() != true)
    {
        <button type="button"
                class="snackbar-close"
                aria-label="Close notification"
                disabled="@IsDisposed"
                @onclick="CloseAsync"
                @onclick:preventDefault="true"
                @onclick:stopPropagation="true">
            @SnackbarIcons.CloseIcon
        </button>
    }

    <!-- Progress Bar -->
    @if (ShouldAutoClose)
    {
        <div class="snackbar-progress" role="progressbar" aria-hidden="true" aria-valuenow="100" aria-valuemin="0"
             aria-valuemax="100">
            <div class="progress-fill"></div>
        </div>
    }
</div>

@code {

    /// <summary>
    /// Gets the appropriate ARIA live region setting based on snackbar type.
    /// </summary>
    private string GetAriaLive() => SnackbarInstance.Type switch
    {
        SnackbarType.Error => "assertive",
        SnackbarType.Warning => "assertive",
        _ => "polite"
    };

}
