@using DropBear.Codex.Blazor.Enums
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase
@namespace DropBear.Codex.Blazor.Components.Progress

<div class="dropbear-progress-container" @onkeydown="HandleKeyDown" tabindex="0">
    <div class="dropbear-progress @GetProgressClass()" id="@_progressId">
        <div class="progress-header">
            <div class="progress-label">@Label</div>
            @if (Type == ProgressBarType.Stepped)
            {
                <div class="step-counter">
                    Step @Math.Min(GetCurrentStepIndex() + 1, _steps.Count) of @_steps.Count
                </div>
            }
        </div>

        <div class="progress-bar-overall">
            <div class="progress-bar-track">
                @if (_isIndeterminate)
                {
                    <div class="progress-bar-fill indeterminate"></div>
                }
                else
                {
                    <div class="progress-bar-fill" style="width: @OverallProgress%">
                        <div class="progress-glow"></div>
                    </div>
                }
            </div>
        </div>

        @if (Type == ProgressBarType.Stepped)
        {
            <div class="progress-steps">
                <div class="step-window">
                    @* Determine a safe currentIndex fallback *@
                    @{
                        var currentIndex = GetCurrentStepIndex();
                        if (currentIndex >= _steps.Count && _steps.Count > 0)
                        {
                            // fallback if no active steps: just set currentIndex to last step
                            currentIndex = _steps.Count - 1;
                        }
                        else if (_steps.Count == 0)
                        {
                            // if no steps at all, render three placeholders
                            currentIndex = 0;
                        }
                    }

                    @* Previous Step or Placeholder *@
                    @if (currentIndex > 0 && _steps.Any())
                    {
                        var previousStep = _steps.ElementAt(currentIndex - 1);
                        <StepItem Step="previousStep" IsActive="false" Progress="100" OnHover="OnStepHover"
                                  HoveredStep="_hoveredStep" Position="StepPosition.Previous"/>
                    }
                    else
                    {
                        <div class="step placeholder">
                            <div class="step-progress">
                                <div class="step-progress-bar" style="width:0;"></div>
                            </div>
                            <div class="step-content">
                                <span class="step-label">No Previous</span>
                                <div class="step-position-badge previous">Previous</div>
                            </div>
                        </div>
                    }

                    @* Current Step or Placeholder *@
                    @if (currentIndex < _steps.Count && _steps.Any())
                    {
                        var currentStep = _steps.ElementAt(currentIndex);
                        <StepItem Step="currentStep" IsActive="true" Progress="TaskProgress" OnHover="OnStepHover"
                                  HoveredStep="_hoveredStep" Position="StepPosition.Current"/>
                    }
                    else
                    {
                        <div class="step placeholder">
                            <div class="step-progress">
                                <div class="step-progress-bar" style="width:0;"></div>
                            </div>
                            <div class="step-content">
                                <span class="step-label">No Current</span>
                                <div class="step-position-badge current">Current</div>
                            </div>
                        </div>
                    }

                    @* Next Step or Placeholder *@
                    @if (currentIndex < _steps.Count - 1 && _steps.Any())
                    {
                        var nextStep = _steps.ElementAt(currentIndex + 1);
                        <StepItem Step="nextStep" IsActive="false" Progress="0" OnHover="OnStepHover"
                                  HoveredStep="_hoveredStep" Position="StepPosition.Next"/>
                    }
                    else
                    {
                        <div class="step placeholder">
                            <div class="step-progress">
                                <div class="step-progress-bar" style="width:0;"></div>
                            </div>
                            <div class="step-content">
                                <span class="step-label">No Next</span>
                                <div class="step-position-badge next">Next</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>
