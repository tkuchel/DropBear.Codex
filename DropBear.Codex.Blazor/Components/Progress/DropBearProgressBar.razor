@using DropBear.Codex.Blazor.Enums
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase
@namespace DropBear.Codex.Blazor.Components.Progress

<div class="dropbear-progress-container" @onkeydown="HandleKeyDown" tabindex="0">
    <div class="dropbear-progress @GetProgressClass()" id="@_progressId">
        <div class="progress-header">
            <div class="progress-label">@Label</div>
            @if (Type == ProgressBarType.Stepped)
            {
                <div class="step-counter">
                    Step @Math.Min(GetCurrentStepIndex() + 1, _steps.Count) of @_steps.Count
                </div>
            }
        </div>

        <div class="progress-bar-overall">
            <div class="progress-bar-track">
                @if (_isIndeterminate)
                {
                    <div class="progress-bar-fill indeterminate"></div>
                }
                else
                {
                    <div class="progress-bar-fill" style="width: @OverallProgress%">
                        <div class="progress-glow"></div>
                    </div>
                }
            </div>
        </div>

        @if (Type == ProgressBarType.Stepped)
        {
            <div class="progress-steps">
                <div class="step-window">
                    @if (GetCurrentStepIndex() > 0)
                    {
                        var previousStep = _steps.ElementAt(GetCurrentStepIndex() - 1);
                        <StepItem
                            Step="previousStep"
                            IsActive="false"
                            Progress="100"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Previous"/>
                    }
                    else
                    {
                        // Display a placeholder step as if it were a valid step, just no data
                        <StepItem
                            Step="@CreatePlaceholderStep("No Previous")"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Previous"/>
                    }

                    @if (GetCurrentStepIndex() < _steps.Count)
                    {
                        var currentStep = _steps.ElementAt(GetCurrentStepIndex());
                        <StepItem
                            Step="currentStep"
                            IsActive="true"
                            Progress="TaskProgress"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Current"/>
                    }
                    else
                    {
                        <StepItem
                            Step="@CreatePlaceholderStep("No Current")"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Current"/>
                    }

                    @if (GetCurrentStepIndex() < _steps.Count - 1)
                    {
                        var nextStep = _steps.ElementAt(GetCurrentStepIndex() + 1);
                        <StepItem
                            Step="nextStep"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Next"/>
                    }
                    else
                    {
                        <StepItem
                            Step="@CreatePlaceholderStep("No Next")"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Next"/>
                    }
                </div>
            </div>
        }
    </div>
</div>
