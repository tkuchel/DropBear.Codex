@using DropBear.Codex.Blazor.Enums
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase
@namespace DropBear.Codex.Blazor.Components.Progress

<div class="dropbear-progress-container @(IsIndeterminate ? "indeterminate" : "")" role="progressbar"
     aria-valuemin="0" aria-valuemax="100" aria-valuenow="@(_state?.OverallProgress ?? 0)">
    <div class="dropbear-progress">
        <div class="progress-header">
            <div class="progress-message">@Message</div>
            @if (!IsIndeterminate)
            {
                <div class="progress-step">@($"{_state?.OverallProgress:F0}%")</div>
            }
        </div>

        <div class="progress-bar-container">
            <div class="progress-bar @(IsIndeterminate ? "indeterminate" : "")"
                 style="@(!IsIndeterminate ? $"width: {_state?.OverallProgress:F1}%" : "")">
            </div>
        </div>

        @if (!IsIndeterminate && Steps?.Any() == true)
        {
            <div class="steps-container">
                @foreach (var (step, index) in GetVisibleSteps())
                {
                    var position = index switch
                    {
                        0 => StepPosition.Previous,
                        1 => StepPosition.Current,
                        2 => StepPosition.Next,
                        _ => StepPosition.Next
                    };

                    var stepState = _state?.GetOrCreateStepState(step.Id);

                    <DropBearProgressBarStep
                        Config="step"
                        Position="position"
                        Progress="stepState?.Progress ?? 0"
                        Status="stepState?.Status ?? StepStatus.NotStarted"/>
                }
            </div>
        }

        @if (!IsIndeterminate && _state?.OverallProgress is > 0 and < 100)
        {
            <div class="estimated-time">
                <i class="fas fa-clock"></i>
                <span>@GetEstimatedTimeRemaining()</span>
            </div>
        }
    </div>
</div>

@code {

    private string GetEstimatedTimeRemaining()
    {
        if (_state == null || _state.OverallProgress <= 0) return string.Empty;

        var elapsed = DateTime.UtcNow - _state.StartTime;
        var estimatedTotal = TimeSpan.FromTicks((long)(elapsed.Ticks / (_state.OverallProgress / 100)));
        var remaining = estimatedTotal - elapsed;

        return $"Estimated time remaining: {FormatTimeSpan(remaining)}";
    }

    private string FormatTimeSpan(TimeSpan span)
    {
        if (span.TotalHours >= 1)
            return $"{span.TotalHours:F1} hours";
        if (span.TotalMinutes >= 1)
            return $"{span.TotalMinutes:F0} minutes";
        return $"{span.TotalSeconds:F0} seconds";
    }

}
