@using DropBear.Codex.Blazor.Enums
@using DropBear.Codex.Blazor.Models
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase
@namespace DropBear.Codex.Blazor.Components.Progress

<div class="dropbear-progress-container">
    <div class="dropbear-progress @GetProgressClass()" id="@_progressId">
        @if (Type == ProgressBarType.Stepped)
        {
            <div class="progress-steps">
                <div class="step-window">
                    @* Previous Step *@
                    @if (GetCurrentStepIndex() > 0)
                    {
                        var prevStep = _steps.ElementAt(GetCurrentStepIndex() - 1);
                        <div class="step completed @GetStepClass(prevStep)">
                            <div class="step-indicator" role="progressbar"
                                 aria-valuenow="100"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                            </div>
                            <span class="step-label step-previous">@prevStep.Label</span>
                        </div>
                    }

                    @* Current Step *@
                    @if (GetCurrentStepIndex() < _steps.Count)
                    {
                        var currentStep = _steps.ElementAt(GetCurrentStepIndex());
                        <div class="step active @GetStepClass(currentStep)">
                            <div class="step-indicator" role="progressbar"
                                 aria-valuenow="@GetStepProgress(currentStep)"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                            </div>
                            <span class="step-label step-current">@currentStep.Label</span>
                        </div>
                    }

                    @* Next Step *@
                    @if (GetCurrentStepIndex() < _steps.Count - 1)
                    {
                        var nextStep = _steps.ElementAt(GetCurrentStepIndex() + 1);
                        <div class="step @GetStepClass(nextStep)">
                            <div class="step-indicator" role="progressbar"
                                 aria-valuenow="0"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                            </div>
                            <span class="step-label step-next">@nextStep.Label</span>
                        </div>
                    }
                </div>
            </div>

            <div class="progress-bar-wrapper">
                <div
                    class="progress-bar @(Type == ProgressBarType.Standard ? "overall-progress-bar" : "task-progress-bar")"
                    style="@GetProgressStyle()">
                    <div class="progress-glow"></div>
                </div>
            </div>

            <div class="step-counter">
                Step @(GetCurrentStepIndex() + 1) of @_steps.Count
            </div>
        }
        else
        {
            <div class="progress-bar-wrapper">
                <div class="progress-bar" style="@GetProgressStyle()">
                    <div class="progress-glow"></div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Label))
            {
                <div class="progress-label">@Label</div>
            }
            else if (_isIndeterminate)
            {
                <div class="progress-label">Loading...</div>
            }
            else
            {
                <div class="progress-label">@Progress.ToString("F0")%</div>
            }
        }
    </div>
</div>

@code {

    private string GetProgressClass()
    {
        return Type switch
        {
            ProgressBarType.Indeterminate => "indeterminate",
            ProgressBarType.Stepped => "with-steps",
            _ => "standard"
        };
    }

    private string GetStepClass(ProgressStep step)
    {
        var classes = new List<string>();

        if (step.Status == StepStatus.Active)
        {
            classes.Add("active");
        }
        else if (step.Status != StepStatus.NotStarted)
        {
            classes.Add("completed");
        }

        classes.Add(step.Status switch
        {
            StepStatus.Completed => "success",
            StepStatus.Warning => "warning",
            StepStatus.Error => "error",
            _ => ""
        });

        return string.Join(" ", classes);
    }

    private string GetProgressStyle()
    {
        if (_isIndeterminate)
            return "";

        return Type == ProgressBarType.Stepped
            ? $"width: {TaskProgress}%"
            : $"width: {OverallProgress}%";
    }

    private int GetStepProgress(ProgressStep step)
    {
        return step.Status switch
        {
            StepStatus.Completed => 100,
            StepStatus.Active => 50,
            _ => 0
        };
    }

}
