@using DropBear.Codex.Blazor.Enums
@inherits DropBear.Codex.Blazor.Components.Bases.DropBearComponentBase
@namespace DropBear.Codex.Blazor.Components.Progress

<div class="dropbear-progress-container"
     @onkeydown="HandleKeyDown"
     tabindex="0"
     role="progressbar"
     aria-valuemin="0"
     aria-valuemax="100"
     aria-valuenow="@OverallProgress">
    <div class="dropbear-progress @GetProgressClass() @(_failedSteps.Any() ? "has-errors" : "")" id="@_progressId">
        <div class="progress-header">
            <div class="progress-label">@Label</div>
            @if (Type == ProgressBarType.Stepped && _steps?.Any() == true)
            {
                <div class="step-counter">
                    Step @Math.Min(GetCurrentStepIndex() + 1, _steps.Count) of @_steps.Count
                </div>
            }
        </div>

        <div class="progress-bar-overall">
            <div class="progress-bar-track">
                @if (_isIndeterminate)
                {
                    <div class="progress-bar-fill indeterminate"></div>
                }
                else
                {
                    <div class="progress-bar-fill" style="width: @OverallProgress%">
                        <div class="progress-glow"></div>
                    </div>
                }
            </div>
        </div>

        @if (Type == ProgressBarType.Stepped && _steps?.Any() == true)
        {
            <div class="progress-steps @(_isTransitioning ? "transitioning" : "")">
                <div class="step-window">
                    @{
                        var currentIndex = GetCurrentStepIndex();
                        var showPrevious = currentIndex > 0 && currentIndex < _steps.Count;
                        var previousStep = showPrevious ? _steps.ElementAtOrDefault(currentIndex - 1) : null;
                    }

                    @if (previousStep != null)
                    {
                        <StepItem
                            Step="previousStep"
                            IsActive="false"
                            Progress="100"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Previous"/>
                    }
                    else
                    {
                        <StepItem
                            Step="@CreatePlaceholderStep("")"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Previous"/>
                    }

                    @{
                        var currentStep = _steps.ElementAtOrDefault(currentIndex);
                    }
                    <StepItem
                        Step="@(currentStep ?? CreatePlaceholderStep(""))"
                        IsActive="true"
                        Progress="TaskProgress"
                        OnHover="OnStepHover"
                        HoveredStep="_hoveredStep"
                        Position="StepPosition.Current"/>

                    @{
                        var showNext = currentIndex < _steps.Count - 1;
                        var nextStep = showNext ? _steps.ElementAtOrDefault(currentIndex + 1) : null;
                    }
                    @if (nextStep != null)
                    {
                        <StepItem
                            Step="nextStep"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Next"/>
                    }
                    else
                    {
                        <StepItem
                            Step="@CreatePlaceholderStep("")"
                            IsActive="false"
                            Progress="0"
                            OnHover="OnStepHover"
                            HoveredStep="_hoveredStep"
                            Position="StepPosition.Next"/>
                    }
                </div>
            </div>
        }
    </div>
</div>
